// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kidoman/embd (interfaces: SPIBus)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSPIBus is a mock of SPIBus interface
type MockSPIBus struct {
	ctrl     *gomock.Controller
	recorder *MockSPIBusMockRecorder
}

// MockSPIBusMockRecorder is the mock recorder for MockSPIBus
type MockSPIBusMockRecorder struct {
	mock *MockSPIBus
}

// NewMockSPIBus creates a new mock instance
func NewMockSPIBus(ctrl *gomock.Controller) *MockSPIBus {
	mock := &MockSPIBus{ctrl: ctrl}
	mock.recorder = &MockSPIBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSPIBus) EXPECT() *MockSPIBusMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockSPIBus) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockSPIBusMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockSPIBus)(nil).Close))
}

// ReceiveByte mocks base method
func (_m *MockSPIBus) ReceiveByte() (byte, error) {
	ret := _m.ctrl.Call(_m, "ReceiveByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveByte indicates an expected call of ReceiveByte
func (_mr *MockSPIBusMockRecorder) ReceiveByte() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReceiveByte", reflect.TypeOf((*MockSPIBus)(nil).ReceiveByte))
}

// ReceiveData mocks base method
func (_m *MockSPIBus) ReceiveData(_param0 int) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReceiveData", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveData indicates an expected call of ReceiveData
func (_mr *MockSPIBusMockRecorder) ReceiveData(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReceiveData", reflect.TypeOf((*MockSPIBus)(nil).ReceiveData), arg0)
}

// TransferAndReceiveByte mocks base method
func (_m *MockSPIBus) TransferAndReceiveByte(_param0 byte) (byte, error) {
	ret := _m.ctrl.Call(_m, "TransferAndReceiveByte", _param0)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferAndReceiveByte indicates an expected call of TransferAndReceiveByte
func (_mr *MockSPIBusMockRecorder) TransferAndReceiveByte(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TransferAndReceiveByte", reflect.TypeOf((*MockSPIBus)(nil).TransferAndReceiveByte), arg0)
}

// TransferAndReceiveData mocks base method
func (_m *MockSPIBus) TransferAndReceiveData(_param0 []byte) error {
	ret := _m.ctrl.Call(_m, "TransferAndReceiveData", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAndReceiveData indicates an expected call of TransferAndReceiveData
func (_mr *MockSPIBusMockRecorder) TransferAndReceiveData(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TransferAndReceiveData", reflect.TypeOf((*MockSPIBus)(nil).TransferAndReceiveData), arg0)
}

// Write mocks base method
func (_m *MockSPIBus) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (_mr *MockSPIBusMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockSPIBus)(nil).Write), arg0)
}
