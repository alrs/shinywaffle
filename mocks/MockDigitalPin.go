// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kidoman/embd (interfaces: DigitalPin)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	embd "github.com/kidoman/embd"
	reflect "reflect"
	time "time"
)

// MockDigitalPin is a mock of DigitalPin interface
type MockDigitalPin struct {
	ctrl     *gomock.Controller
	recorder *MockDigitalPinMockRecorder
}

// MockDigitalPinMockRecorder is the mock recorder for MockDigitalPin
type MockDigitalPinMockRecorder struct {
	mock *MockDigitalPin
}

// NewMockDigitalPin creates a new mock instance
func NewMockDigitalPin(ctrl *gomock.Controller) *MockDigitalPin {
	mock := &MockDigitalPin{ctrl: ctrl}
	mock.recorder = &MockDigitalPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDigitalPin) EXPECT() *MockDigitalPinMockRecorder {
	return _m.recorder
}

// ActiveLow mocks base method
func (_m *MockDigitalPin) ActiveLow(_param0 bool) error {
	ret := _m.ctrl.Call(_m, "ActiveLow", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveLow indicates an expected call of ActiveLow
func (_mr *MockDigitalPinMockRecorder) ActiveLow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActiveLow", reflect.TypeOf((*MockDigitalPin)(nil).ActiveLow), arg0)
}

// Close mocks base method
func (_m *MockDigitalPin) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDigitalPinMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDigitalPin)(nil).Close))
}

// N mocks base method
func (_m *MockDigitalPin) N() int {
	ret := _m.ctrl.Call(_m, "N")
	ret0, _ := ret[0].(int)
	return ret0
}

// N indicates an expected call of N
func (_mr *MockDigitalPinMockRecorder) N() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "N", reflect.TypeOf((*MockDigitalPin)(nil).N))
}

// PullDown mocks base method
func (_m *MockDigitalPin) PullDown() error {
	ret := _m.ctrl.Call(_m, "PullDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// PullDown indicates an expected call of PullDown
func (_mr *MockDigitalPinMockRecorder) PullDown() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PullDown", reflect.TypeOf((*MockDigitalPin)(nil).PullDown))
}

// PullUp mocks base method
func (_m *MockDigitalPin) PullUp() error {
	ret := _m.ctrl.Call(_m, "PullUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// PullUp indicates an expected call of PullUp
func (_mr *MockDigitalPinMockRecorder) PullUp() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PullUp", reflect.TypeOf((*MockDigitalPin)(nil).PullUp))
}

// Read mocks base method
func (_m *MockDigitalPin) Read() (int, error) {
	ret := _m.ctrl.Call(_m, "Read")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (_mr *MockDigitalPinMockRecorder) Read() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockDigitalPin)(nil).Read))
}

// SetDirection mocks base method
func (_m *MockDigitalPin) SetDirection(_param0 embd.Direction) error {
	ret := _m.ctrl.Call(_m, "SetDirection", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection
func (_mr *MockDigitalPinMockRecorder) SetDirection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetDirection", reflect.TypeOf((*MockDigitalPin)(nil).SetDirection), arg0)
}

// StopWatching mocks base method
func (_m *MockDigitalPin) StopWatching() error {
	ret := _m.ctrl.Call(_m, "StopWatching")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWatching indicates an expected call of StopWatching
func (_mr *MockDigitalPinMockRecorder) StopWatching() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StopWatching", reflect.TypeOf((*MockDigitalPin)(nil).StopWatching))
}

// TimePulse mocks base method
func (_m *MockDigitalPin) TimePulse(_param0 int) (time.Duration, error) {
	ret := _m.ctrl.Call(_m, "TimePulse", _param0)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimePulse indicates an expected call of TimePulse
func (_mr *MockDigitalPinMockRecorder) TimePulse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TimePulse", reflect.TypeOf((*MockDigitalPin)(nil).TimePulse), arg0)
}

// Watch mocks base method
func (_m *MockDigitalPin) Watch(_param0 embd.Edge, _param1 func(embd.DigitalPin)) error {
	ret := _m.ctrl.Call(_m, "Watch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (_mr *MockDigitalPinMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockDigitalPin)(nil).Watch), arg0, arg1)
}

// Write mocks base method
func (_m *MockDigitalPin) Write(_param0 int) error {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockDigitalPinMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockDigitalPin)(nil).Write), arg0)
}
